# Redirect all HTTP traffic to the HTTPS
server{
  listen 80;
  server_name {{domain}};

  # Strict Transport Security
  # Disable by default because we're still using mixed HTTP with HTTPS
  add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";

  return 301 https://$server_name$request_uri;
}

# HTTPS
server{
  listen 443 ssl http2;

  server_name {{domain}};
  root /var/www;

  # Individual nginx logs
  access_log /var/log/nginx/{{domain}}.access.log main;
  error_log /var/log/nginx/{{domain}}.error.log;

  # SSL security
  ssl_dhparam /etc/nginx/dhparam.pem;
  ssl_certificate /etc/nginx/ssl/{{domain}}.crt;
  ssl_certificate_key /etc/nginx/ssl/{{domain}}.key;

  ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 5m;

  # Strict Transport Security
  # Disable by default because we're still using mixed HTTP with HTTPS
  add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";

  add_header X-Frame-Options SAMEORIGIN; #DENY, SAMEORIGIN, ALLOW-FROM
  add_header X-Content-Type-Options nosniff;
  ssl_session_tickets off;
 # ssl_stapling on;
 # ssl_stapling_verify on;

  # HTTP authentication
  auth_basic "Restricted Content";
  auth_basic_user_file /etc/nginx/.{{domain.split(".")[0]}}_htpasswd;

  location / {
    proxy_pass http://{{prometheus_addr}}/;

    # Force timeouts if the backend dies
    proxy_intercept_errors on;
    proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;

   # Set headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;

  # Set timeouts
    proxy_connect_timeout   3600;
    proxy_send_timeout      3600;
    proxy_read_timeout      3600;
    send_timeout            3600;

    # By default, do not forward anything
    proxy_redirect          off;
  }

  location /alertsmanager {
    proxy_pass  http://{{alertmanager_addr}}/;
    if ($request_uri ~ /alertsmanager){
      rewrite /alertsmanager/(.*)$ /$1 break;
    }
  }

}
